import express from "express";
import { createClient } from "@supabase/supabase-js";
import { v4 as uuidv4 } from "uuid";

const router = express.Router();

// üîë Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// üì¶ POST /api/order
router.post("/", async (req, res) => {
  try {
    const { steamId, amount, api_login, api_key } = req.body;

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!steamId || !amount || !api_login || !api_key) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    // ‚úÖ –ï—Å–ª–∏ —ç—Ç–æ ping-–∑–∞–ø—Ä–æ—Å
    if (steamId === "ping") {
      return res.status(200).json({ result: "pong" });
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ api_clients
    const { data: client, error: clientErr } = await supabase
      .from("api_clients")
      .select("api_login, api_key")
      .eq("api_login", api_login)
      .eq("api_key", api_key)
      .maybeSingle();

    if (clientErr) throw clientErr;

    if (!client) {
      return res.status(401).json({ error: "Invalid API credentials" });
    }

    // üìÖ –í—Ä–µ–º—è
    const now = new Date().toISOString();

    // üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ steam_login
    const { data: user, error: userErr } = await supabase
      .from("profiles")
      .select("id")
      .eq("steam_login", steamId)
      .maybeSingle();

    if (userErr) throw userErr;

    // üéüÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏ —Å—Å—ã–ª–∫–∏
    const operation_id = uuidv4();
    const nspk = `https://pay.nspk.ru/${operation_id}`;

    // üíæ –ó–∞–ø–∏—Å—å –≤ purchases
    const newPurchase = {
      id: operation_id,
      user_id: user ? user.id : null,
      steam_login: steamId,
      amount,
      status: "pending",
      nspk,
      api_login, // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—Ç–æ —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å
      created_at: now,
      updated_at: now,
    };

    const { error: insertErr } = await supabase
      .from("purchases")
      .insert([newPurchase]);

    if (insertErr) throw insertErr;

    // üßæ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    return res.json({
      result: {
        qr_link: nspk,
        operation_id,
      },
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ /api/order:", err);
    return res.status(500).json({ error: err.message });
  }
});

export default router;
