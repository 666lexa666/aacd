import axios from "axios";
import https from "https";
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Supabase URL or Service Role Key is not set!');
}

const supabase = createClient(supabaseUrl, supabaseKey);

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

export default async function handler(req, res) {
  try {
    if (req.method !== "POST") return res.status(405).json({ error: "Method not allowed" });

    const { qrc_id } = req.body;
    if (!qrc_id) return res.status(400).json({ error: "qrc_id is required" });

    // ‚è± –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    await delay(5000);

    // ‚öôÔ∏è –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ purchases
    const { data: purchase, error } = await supabase
      .from("purchases")
      .select("*")
      .eq("qr_id", qrc_id)
      .single();

    if (error || !purchase) {
      console.error("‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", error);
      return res.status(404).json({ error: "Purchase not found" });
    }

    const { amount, commit, refund_attempts = 0, api_login, steam_login } = purchase;

    if (!process.env.CFT_PFX_BASE64 || !process.env.CFT_PFX_PASSWORD) {
      return res.status(500).json({ error: "CFT_PFX_BASE64 or password not set" });
    }

    // üîí –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTPS –∞–≥–µ–Ω—Ç –¥–ª—è mTLS
    const pfxBuffer = Buffer.from(process.env.CFT_PFX_BASE64, "base64");
    const httpsAgent = new https.Agent({
      pfx: pfxBuffer,
      passphrase: process.env.CFT_PFX_PASSWORD,
      rejectUnauthorized: true,
    });

    const refundUrl = process.env.CFT_REFUND_URL;
    const refId = `${qrc_id}-${Date.now()}`;

    // üì¶ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const refundBody = {
      longWait: false,
      refId,
      internalTxId: commit || undefined,
      amount: amount * 100, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      refType: "qrcId",
      refData: qrc_id,
      remitInfo: "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –ø–æ–∫—É–ø–∫–µ",
    };

    console.log("üîÅ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ ‚Ññ", refund_attempts + 1, "–¥–ª—è", qrc_id);

    const response = await axios.post(refundUrl, refundBody, {
      headers: {
        "Content-Type": "application/json",
        authsp: process.env.CFT_PROD_AUTHSP || "socium-bank.ru",
      },
      timeout: 30000,
      httpsAgent,
      validateStatus: () => true,
    });

    const { status } = response;

    if (status === 200 || status === 202) {
      console.log("‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–µ–Ω:", response.data);

      await supabase
        .from("purchases")
        .update({ status: "refund", refund_attempts: refund_attempts + 1 })
        .eq("qr_id", qrc_id);

      // üß† –ò—â–µ–º client_id –ø–æ steam_login
      let client_id = null;
      const { data: client } = await supabase
        .from("client")
        .select("id_client")
        .eq("steam_login", steam_login)
        .single();
      if (client) client_id = client.id_client;

      // üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
      const successMsg = `
‚úÖ *–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!*
QR: \`${qrc_id}\`
–ü–∞—Ä—Ç–Ω—ë—Ä: \`${api_login || "N/A"}\`
Steam: \`${steam_login || "N/A"}\`
${client_id ? `ID –∫–ª–∏–µ–Ω—Ç–∞: \`${client_id}\`\n` : ""}
Commit: \`${commit || "N/A"}\`
–°—É–º–º–∞: *${amount} ‚ÇΩ*
Status: ${status}
      `;

      await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text: successMsg,
        parse_mode: "Markdown",
      });

      return res.status(200).json({ success: true, data: response.data });
    } else {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:", response.status, response.data);

      const newAttempts = refund_attempts + 1;

      if (newAttempts < 5) {
        await supabase.from("purchases").update({ refund_attempts: newAttempts }).eq("qr_id", qrc_id);
        console.log(`üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (${newAttempts}/5)`);
        await delay(5000);
        return handler(req, res);
      } else {
        await supabase
          .from("purchases")
          .update({ status: "failed_refund", refund_attempts: newAttempts })
          .eq("qr_id", qrc_id);

        let client_id = null;
        const { data: client } = await supabase
          .from("client")
          .select("id_client")
          .eq("steam_login", steam_login)
          .single();
        if (client) client_id = client.id_client;

        // üö® Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const failMsg = `
üö® *–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤*
QR: \`${qrc_id}\`
–ü–∞—Ä—Ç–Ω—ë—Ä: \`${api_login || "N/A"}\`
Steam: \`${steam_login || "N/A"}\`
${client_id ? `ID –∫–ª–∏–µ–Ω—Ç–∞: \`${client_id}\`\n` : ""}
–ü–æ–ø—ã—Ç–æ–∫: ${newAttempts}
Status: \`${response.status}\`
Message: ${JSON.stringify(response.data)}
        `;

        await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: failMsg,
          parse_mode: "Markdown",
        });

        return res.status(500).json({ error: "Refund failed after 5 attempts" });
      }
    }
  } catch (err) {
    console.error("üí• –û—à–∏–±–∫–∞ –≤ refund.js:", err);
    return res.status(500).json({ error: err.message });
  }
}
