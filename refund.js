import express from "express";
import https from "https";
import fetch from "node-fetch";
import { createClient } from "@supabase/supabase-js";

const router = express.Router();

// üîπ Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// üîπ –ö–æ–Ω—Ñ–∏–≥ –±–∞–Ω–∫–∞
const BANK_URL = "https://zkc2b-socium.koronacard.ru/refund/order";
const BANK_MEMBER_ID = "100000000223"; // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π

// POST /api/refund
router.post("/", async (req, res) => {
  const { qr_id } = req.body;
  if (!qr_id) return res.status(400).json({ error: "qr_id required" });

  // üîπ –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ Supabase
  const { data: payments, error } = await supabase
    .from("purchases")
    .select("*")
    .eq("qr_id", qr_id)
    .limit(1)
    .single();

  if (error) return res.status(500).json({ error: error.message });
  if (!payments) return res.status(404).json({ error: "Payment not found" });

  const payment = payments;

  // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –±–∞–Ω–∫–∞
  const payload = {
    internalTxId: `refund_${Date.now()}`,
    refId: `refund_${Date.now()}`,
    refType: "qrcId",
    refData: payment.qr_id,
    amount: Math.round(parseFloat(payment.amount) * 100), // —Ä—É–±–ª–∏ ‚Üí –∫–æ–ø–µ–π–∫–∏
    remitInfo: payment.commit || `–í–æ–∑–≤—Ä–∞—Ç –ø–æ–∫—É–ø–∫–∏ ${payment.id}`,
    rcvBankMemberId: BANK_MEMBER_ID,
  };

  // üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PFX –∞–≥–µ–Ω—Ç
  if (!process.env.CFT_PFX_BASE64 || !process.env.CFT_PFX_PASSWORD) {
    return res.status(500).json({ error: "PFX base64 or password not set in environment" });
  }

  const pfxBuffer = Buffer.from(process.env.CFT_PFX_BASE64, "base64");
  const agent = new https.Agent({
    pfx: pfxBuffer,
    passphrase: process.env.CFT_PFX_PASSWORD,
    rejectUnauthorized: true,
  });

  try {
    // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –≤ –±–∞–Ω–∫
    const response = await fetch(BANK_URL, {
      method: "POST",
      body: JSON.stringify(payload),
      headers: { "Content-Type": "application/json" },
      agent,
    });

    const result = await response.json();

    // üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –±–∞–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç—É
    return res.status(response.status).json(result);
  } catch (err) {
    return res.status(500).json({ error: err.message });
  }
});

export default router;
