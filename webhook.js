import express from "express";
import { createClient } from "@supabase/supabase-js";
import axios from "axios";

const router = express.Router();
router.use(express.json());

// üîë –ü–æ–¥–∫–ª—é—á–∞–µ–º Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// üì¶ –û—Å–Ω–æ–≤–Ω–æ–π webhook
router.post("/", async (req, res) => {
  const timestamp = new Date().toISOString();
  const body = req.body;

  console.log(`[${timestamp}] Webhook received:`, body);

  try {
    const { amount, qrcId, sndPam, sndPhoneMasked } = body;

    if (!qrcId || !sndPam || !sndPhoneMasked || !amount) {
      console.warn("‚ùå Missing required fields in webhook");
      return res.status(400).json({ error: "Missing required fields" });
    }

    // üîç –ò—â–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ qrcId
    const { data: currentPayment, error: findErr } = await supabase
      .from("purchases")
      .select("id, amount, created_at, status")
      .eq("qr_id", qrcId)
      .maybeSingle();

    if (findErr) throw findErr;
    if (!currentPayment) {
      console.warn(`‚ö†Ô∏è Payment not found for qr_id = ${qrcId}`);
      return res.status(404).json({ error: "Payment not found" });
    }

    const purchaseId = currentPayment.id;

    // üïí –†–∞–±–æ—Ç–∞–µ–º –≤ UTC+3
    const now = new Date();
    const utc3 = new Date(now.getTime() + 3 * 60 * 60 * 1000);
    const startOfDay = new Date(utc3);
    startOfDay.setHours(0, 0, 0, 0);
    const startOfMonth = new Date(utc3.getFullYear(), utc3.getMonth(), 1);

    // üîé –ë–µ—Ä—ë–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü/–¥–µ–Ω—å (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
    const { data: payments, error: paymentsErr } = await supabase
      .from("purchases")
      .select("amount, created_at")
      .eq("sndpam", sndPam)
      .eq("payer_phone", sndPhoneMasked)
      .eq("status", "success")
      .neq("qr_id", qrcId);

    if (paymentsErr) throw paymentsErr;

    // üßÆ –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–∞ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü (–±–µ–∑ —Ç–µ–∫—É—â–µ–π)
    let totalDayWithoutCurrent = 0;
    let totalMonthWithoutCurrent = 0;

    for (const p of payments || []) {
      const created = new Date(p.created_at);
      const createdUTC3 = new Date(created.getTime() + 3 * 60 * 60 * 1000);
      if (createdUTC3 >= startOfDay) totalDayWithoutCurrent += p.amount;
      if (createdUTC3 >= startOfMonth) totalMonthWithoutCurrent += p.amount;
    }

    const currentAmountRub = Number(amount) / 100;
    const totalDay = totalDayWithoutCurrent + currentAmountRub;
    const totalMonth = totalMonthWithoutCurrent + currentAmountRub;

    console.log(
      `üí∞ User: ${sndPam} (${sndPhoneMasked}) | Day total: ${totalDay}‚ÇΩ | Month total: ${totalMonth}‚ÇΩ`
    );

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    const dayLimit = 10_000;
    const monthLimit = 100_000;

    let refundReason = null;
    let newStatus = "success";
    let commitMessage = null;

    if (totalDay > dayLimit) {
      const remaining = dayLimit - totalDayWithoutCurrent;
      refundReason = `–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (${dayLimit}‚ÇΩ)`;
      commitMessage = `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å. –û—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç ${remaining}—Ä—É–±–ª–µ–π.`;
      newStatus = "pending_refund";
    } else if (totalMonth > monthLimit) {
      const remaining = monthLimit - totalMonthWithoutCurrent;
      refundReason = `–ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç (${monthLimit}‚ÇΩ)`;
      commitMessage = `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –º–µ—Å—è—Ü. –û—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç ${remaining}—Ä—É–±–ª–µ–π.`;
      newStatus = "pending_refund";
    }

    // üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ commit –≤ purchases
    const { error: updateErr } = await supabase
      .from("purchases")
      .update({
        sndpam: sndPam,
        payer_phone: sndPhoneMasked,
        status: newStatus,
        commit: commitMessage,
        updated_at: new Date().toISOString(),
      })
      .eq("qr_id", qrcId);

    if (updateErr) throw updateErr;

    // ‚öôÔ∏è –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –ø—Ä–µ–≤—ã—à–µ–Ω—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ refund
    if (refundReason) {
      console.log(`‚ö†Ô∏è Payment ${qrcId} flagged for refund: ${refundReason}`);
      
      try {
        const refundRes = await axios.post("https://steam-back.onrender.com/api/refund", {
          qrcId,
        });
        console.log("üí∏ Refund API response:", refundRes.data);
      } catch (refundErr) {
        console.error("‚ùå Refund API request failed:", refundErr.response?.data || refundErr.message);
      }

      return res.status(200).json({ result: "ok (refund pending)" });
    }

    console.log(`‚úÖ Payment ${qrcId} marked as SUCCESS`);

    // üîç –ò—â–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ –∑–∞–ø–∏—Å—å –ø–æ id –∏–∑ purchases
    const { data: odinOrder, error: odinErr } = await supabase
      .from("odin_orders_history")
      .select("id, steam_login, amount")
      .eq("id", purchaseId)
      .maybeSingle();

    if (odinErr) throw odinErr;

    // ‚ö†Ô∏è –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (!odinOrder) {
      console.log(`‚ÑπÔ∏è Odin order not found for id = ${purchaseId}, skipping Steam topup`);
      return res.status(200).json({ result: "ok" });
    }

    // üü¢ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ
    await supabase
      .from("odin_orders_history")
      .update({ status: "success" })
      .eq("id", purchaseId);

    // ‚ö° –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å Steam
    const exchangeRes = await axios.get(
      "https://desslyhub.com/api/v1/exchange_rate/steam/5",
      {
        headers: { apikey: "40a2cbac635f46a280a9e9fd7a5c5b20" },
      }
    );

    const exchangeRate = exchangeRes.data.exchange_rate;
    const steamAmount = odinOrder.amount / exchangeRate;

    console.log(`üí± Exchange rate: ${exchangeRate}, Steam amount: ${steamAmount}`);

    // üí∞ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam
    const topupRes = await axios.post(
      "https://desslyhub.com/api/v1/service/steamtopup/topup",
      {
        amount: steamAmount,
        username: odinOrder.steam_login,
      },
      {
        headers: {
          apikey: "40a2cbac635f46a280a9e9fd7a5c5b20",
          "content-type": "application/json",
        },
      }
    );

    console.log("üéÆ Steam topup result:", topupRes.data);

    return res.status(200).json({
      result: "ok",
      steam_transaction: topupRes.data,
    });
  } catch (err) {
    console.error("‚ùå Webhook processing failed:", err.response?.data || err.message);
    return res.status(500).json({ error: "Internal server error" });
  }
});

export default router;
