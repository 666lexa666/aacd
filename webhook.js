import express from "express";
import axios from "axios";
import https from "https";
import { createClient } from "@supabase/supabase-js";

const router = express.Router();
router.use(express.json());

// üîë –ü–æ–¥–∫–ª—é—á–∞–µ–º Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// üì¶ –û—Å–Ω–æ–≤–Ω–æ–π webhook
router.post("/", async (req, res) => {
  const timestamp = new Date().toISOString();
  const body = req.body;

  console.log(`[${timestamp}] Webhook received:`, body);

  try {
    const { amount, qrcId, sndPam, sndPhoneMasked } = body;

    if (!qrcId || !sndPam || !sndPhoneMasked || !amount) {
      console.warn("‚ùå Missing required fields in webhook");
      return res.status(400).json({ error: "Missing required fields" });
    }

    // üîç –ò—â–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ qrcId
    const { data: currentPayment, error: findErr } = await supabase
      .from("purchases")
      .select("id, amount, created_at, status")
      .eq("qr_id", qrcId)
      .maybeSingle();

    if (findErr) throw findErr;
    if (!currentPayment) {
      console.warn(`‚ö†Ô∏è Payment not found for qr_id = ${qrcId}`);
      return res.status(404).json({ error: "Payment not found" });
    }

    // üïí –†–∞–±–æ—Ç–∞–µ–º –≤ UTC+3
    const now = new Date();
    const utc3 = new Date(now.getTime() + 3 * 60 * 60 * 1000);

    const startOfDay = new Date(utc3);
    startOfDay.setHours(0, 0, 0, 0);
    const startOfMonth = new Date(utc3.getFullYear(), utc3.getMonth(), 1);

    // üîé –ë–µ—Ä—ë–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü/–¥–µ–Ω—å (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
    const { data: payments, error: paymentsErr } = await supabase
      .from("purchases")
      .select("amount, created_at")
      .eq("sndPam", sndPam)
      .eq("payer_phone", sndPhoneMasked)
      .eq("status", "success")
      .neq("qr_id", qrcId);

    if (paymentsErr) throw paymentsErr;

    // üßÆ –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–∞ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
    let totalDay = 0;
    let totalMonth = 0;

    for (const p of payments || []) {
      const created = new Date(p.created_at);
      if (created >= startOfDay) totalDay += p.amount;
      if (created >= startOfMonth) totalMonth += p.amount;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É (–≤ —Ä—É–±–ª—è—Ö, —Ç.–∫. –∏–∑ webhook –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    const currentAmountRub = Number(amount) / 100;
    totalDay += currentAmountRub;
    totalMonth += currentAmountRub;

    console.log(
      `üí∞ User: ${sndPam} (${sndPhoneMasked}) | Day total: ${totalDay}‚ÇΩ | Month total: ${totalMonth}‚ÇΩ`
    );

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    const dayLimit = 10_000;
    const monthLimit = 100_000;

    let newStatus = "success";
    let refundReason = null;

    if (totalDay > dayLimit) {
      refundReason = "–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π (10 000‚ÇΩ)";
      newStatus = "refund";
    } else if (totalMonth > monthLimit) {
      refundReason = "–ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π (100 000‚ÇΩ)";
      newStatus = "refund";
    }

    // üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    const { error: updateErr } = await supabase
      .from("purchases")
      .update({
        sndPam,
        payer_phone: sndPhoneMasked,
        status: newStatus,
        updated_at: new Date().toISOString(),
      })
      .eq("qr_id", qrcId);

    if (updateErr) throw updateErr;

    // üîÅ –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ‚Äî –¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ –¶–§–¢
    if (newStatus === "refund") {
      console.log(`üîÅ Initiating refund for ${qrcId}: ${refundReason}`);

      const refundBody = {
        longWait: false,
        refId: `refund-${qrcId}`,
        refType: "qrcId",
        refData: qrcId,
        amount: Number(amount),
        remitInfo: refundReason,
      };

      const pfxBuffer = Buffer.from(process.env.CFT_PFX_BASE64, "base64");

      const agent = new https.Agent({
        pfx: pfxBuffer,
        passphrase: process.env.CFT_PFX_PASSWORD,
        rejectUnauthorized: true,
      });

      try {
        const refundRes = await axios.post(
          process.env.CFT_REFUND_URL,
          refundBody,
          {
            headers: {
              "Content-Type": "application/json",
              authsp: process.env.CFT_PROD_AUTHSP || "socium-bank.ru",
            },
            httpsAgent: agent,
            timeout: 15000,
          }
        );

        console.log("‚úÖ Refund response:", refundRes.data);
      } catch (refundErr) {
        console.error("‚ùå Refund request failed:", refundErr.message);
      }
    } else {
      console.log(`‚úÖ Payment ${qrcId} marked as SUCCESS`);
    }

    return res.status(200).json({ result: "ok" });
  } catch (err) {
    console.error("‚ùå Webhook processing failed:", err);
    return res.status(500).json({ error: "Internal server error" });
  }
});

export default router;
